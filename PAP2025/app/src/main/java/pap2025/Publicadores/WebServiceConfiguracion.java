package pap2025.Publicadores;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Clase de configuraci√≥n para el servicio web
 * Maneja la carga de propiedades desde el archivo de configuraci√≥n
 */
public class WebServiceConfiguracion {
    
    private Properties propiedades;
    
    public WebServiceConfiguracion() throws Exception {
        propiedades = new Properties();
        cargarConfiguracion();
    }
    
    /**
     * Carga la configuraci√≥n desde el archivo properties
     */
    private void cargarConfiguracion() throws Exception {
        try (InputStream input = getClass().getClassLoader().getResourceAsStream("webservice.properties")) {
            if (input == null) {
                // Si no existe el archivo, usar configuraci√≥n por defecto
                System.out.println("‚ö†Ô∏è Archivo webservice.properties no encontrado, usando configuraci√≥n por defecto");
                cargarConfiguracionPorDefecto();
            } else {
                propiedades.load(input);
                System.out.println("‚úÖ Configuraci√≥n cargada desde webservice.properties");
            }
        } catch (IOException e) {
            System.err.println("‚ùå Error al cargar configuraci√≥n: " + e.getMessage());
            cargarConfiguracionPorDefecto();
        }
    }
    
    /**
     * Carga configuraci√≥n por defecto si no existe el archivo
     */
    private void cargarConfiguracionPorDefecto() {
        propiedades.setProperty("WS_IP", "localhost");
        propiedades.setProperty("WS_PORT", "8080");
        propiedades.setProperty("WS_CONTEXT", "bibliotecaWS");
        propiedades.setProperty("DB_HOST", "pgsql-ti.esi.edu.uy");
        propiedades.setProperty("DB_PORT", "5432");
        propiedades.setProperty("DB_NAME", "postgres");
        propiedades.setProperty("DB_USER", "postgres");
        propiedades.setProperty("DB_PASSWORD", "pGsQl5432");
        propiedades.setProperty("LOG_LEVEL", "INFO");
        propiedades.setProperty("SESSION_TIMEOUT", "30");
        propiedades.setProperty("MAX_CONCURRENT_SESSIONS", "100");
        propiedades.setProperty("PRESTAMO_DIAS_DEFAULT", "15");
        propiedades.setProperty("MAX_PRESTAMOS_POR_LECTOR", "5");
        propiedades.setProperty("MULTA_POR_DIA_VENCIDO", "10");
        propiedades.setProperty("MAX_PAGINAS_LIBRO", "2000");
        propiedades.setProperty("MAX_PESO_ARTICULO", "50.0");
        propiedades.setProperty("MAX_DIMENSIONES_ARTICULO", "100.0");
    }
    
    /**
     * Obtiene una propiedad de configuraci√≥n
     * @param clave La clave de la propiedad
     * @return El valor de la propiedad
     */
    public String getConfigOf(String clave) {
        return propiedades.getProperty(clave, "");
    }
    
    /**
     * Obtiene una propiedad de configuraci√≥n con valor por defecto
     * @param clave La clave de la propiedad
     * @param valorPorDefecto Valor por defecto si no existe la clave
     * @return El valor de la propiedad o el valor por defecto
     */
    public String getConfigOf(String clave, String valorPorDefecto) {
        return propiedades.getProperty(clave, valorPorDefecto);
    }
    
    /**
     * Obtiene una propiedad entera
     * @param clave La clave de la propiedad
     * @return El valor entero de la propiedad
     */
    public int getIntConfigOf(String clave) {
        try {
            return Integer.parseInt(propiedades.getProperty(clave, "0"));
        } catch (NumberFormatException e) {
            return 0;
        }
    }
    
    /**
     * Obtiene una propiedad de tipo double
     * @param clave La clave de la propiedad
     * @return El valor double de la propiedad
     */
    public double getDoubleConfigOf(String clave) {
        try {
            return Double.parseDouble(propiedades.getProperty(clave, "0.0"));
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }
    
    /**
     * Verifica si una propiedad existe
     * @param clave La clave de la propiedad
     * @return true si existe, false en caso contrario
     */
    public boolean hasConfig(String clave) {
        return propiedades.containsKey(clave);
    }
    
    /**
     * Imprime toda la configuraci√≥n (sin passwords)
     */
    public void imprimirConfiguracion() {
        System.out.println("üìã Configuraci√≥n del Servicio Web:");
        System.out.println("   üåê IP: " + getConfigOf("WS_IP"));
        System.out.println("   üîå Puerto: " + getConfigOf("WS_PORT"));
        System.out.println("   üìÅ Contexto: " + getConfigOf("WS_CONTEXT"));
        System.out.println("   üóÑÔ∏è Host BD: " + getConfigOf("DB_HOST"));
        System.out.println("   üîå Puerto BD: " + getConfigOf("DB_PORT"));
        System.out.println("   üìä Base de Datos: " + getConfigOf("DB_NAME"));
        System.out.println("   üë§ Usuario BD: " + getConfigOf("DB_USER"));
        System.out.println("   üìù Log Level: " + getConfigOf("LOG_LEVEL"));
        System.out.println("   ‚è±Ô∏è Timeout Sesi√≥n: " + getConfigOf("SESSION_TIMEOUT") + " minutos");
        System.out.println("   üìö D√≠as Pr√©stamo: " + getConfigOf("PRESTAMO_DIAS_DEFAULT"));
        System.out.println("   üìñ Max Pr√©stamos/Lector: " + getConfigOf("MAX_PRESTAMOS_POR_LECTOR"));
    }
}
